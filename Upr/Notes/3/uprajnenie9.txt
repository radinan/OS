winscp - инсталация...
hostname - atero.openfmi.net
username - s<fn>
password - <pw>
др не пипаме 
->connect
някакъв warning (ignore)
=> 2 части
лява  = наша ФС
дясна = remote ФС
---------------------------------------------
	-
~~| C |~~
	-
	
	
C - компилируем език
(source code => компилираме => изпълним файл)
					gcc

_______________
hello_world.c |
--------------|

#include <stdio.h> //за pritntf

int main() {
	pritntf("Hello world!\n");
	return 0;
}

компилиране:
gcc <code>
gcc hello_world.c 
=> създава се a.out
изпълняване:
./a.out 
(->вади Hello world!)

флагове за gcc:
-o 		- сменяме името на изпълнимия файл (a.out)
(gcc -o new_name hello_world.c)

-Werror - warning-ите да са третирани като error-и
-Wall (*)
-Wpedantic (*) - включват допълнителни warning-и
-pedantic			  
-Wextra (*)
	
(gcc -Wall -Wpedantic -Wextra hello_worlld.c)
waning-ите са нефатални (не са предпоставка за "некомпилиране")
	
=> Werror (ако има warning=>error=>кодът не се компилира)
	
В курса:
файл, който не се компилира с флаговете
-std=c99 	- задава стандарт за поведение (версия на c)
-Werror
-Wall
-Wpedantic
-Wextra
-o 
=> грешен
	
	
За да не помним вс тези флагове => Makefile
make - може да чете make file-ове (в тях пише как да компилираме кода ни)
(fmi-os репо има го във вс зад)

make 
за да компилира файла:
В директорията, в която казваме make трябва:
1. да има make file
2. да има source code 
3. source code-а трябва да е в main.c	
	
	
----------------------------------------------------------------------------------
Памет и пойнтъри

файл - съвкупност от байтове
интерпретацията им зависи от програмата, която ги интерпретира

xxd - за стойностите на всеки байт във файла 



-------

unsigned short int - целочислен двубайтов integer
unsigned short int = 2B

в 2 байта -> 16 бита
[0, 2^16 - 1] = [0, 65355]

value = 2^15 * <bit value> + 2^14 * <bit value> + ... + 2^0 * <bit value>
<bit value> - 0 или 1

пример:
162 =  128
	    +
		32
		+
		2
2^7 + 2^5 + 2^1

Имаме 2-байтов integer 162 =>  

Byte A:
_________________
|0|0|0|0|0|0|0|0|
-----------------
няма нищо вдигнато

Byte B:
_________________
|1|0|1|0|0|0|1|0|
-----------------		
битовете са подредени от най-значещ към най-незначещ
(най-висока степен на 2ка към най-ниска)
=> вдигнати са битове за 7, 5, 1 степен на 2ката 


Byte A -  15-8
Byte B -   7-0

Endianess - показва как са подредени байтовете
			(първо най-ниските/най-високите)

Big Endianess
	AB
	
Little Endianess
	BA


-------

unsigned int - целочислен четирибайтов integer
unsigned int - 4B

в 4 байта -> 32 бита
[0, 2^32 - 1]

value = 2^31 * <bit value> + 2^30 * <bit value> + ... + 2^0 * <bit value>
<bit value> - 0 или 1

БИТОВЕТЕ ВИНАГИ от най-значещ -> най-незначещ
endianess - подредба на байтовете!

Little endianess (малко много)

1: 
_________________
|7| | | | | | |0|
-----------------
2: 
__________________
|15| | | | | | |8|
------------------
3: 
___________________
|23| | | | | | |16|
-------------------
4: 
___________________
|31| | | | | | |24|
-------------------


Big endianess (много малко)

1: 
___________________ 
|31| | | | | | |24|
-------------------
2: 
___________________ 
|23| | | | | | |16|
-------------------
3: 
__________________
|15| | | | | | |8|
------------------
4:
_________________
|7| | | | | | |0|
-----------------

-------
char* - null terminated string-ове 
в C няма тип "string"
има char*

2 въпроса:
1. къде в паметта е началото
2. къде в паметта е краят

2 подхода:
1. стрингове = структура с: ptr към началото; големина на стринга
2. ptr към началото; четем до "спец байт" = край
	=> не знаем големината, но знаем края 

-----
Типове памет:

1. Статична	- ясно е колко е (по време на компилация)
			- не зависи от изпълнението на процеса
			
2. Динамична - не е ясно колко ще трябва (по време на компилация)
			 
			 


----------------------------------------
man страници 

man man:
	коя секция за какво отговаря
(инт ни 2 и 3 секция)
2	- инф за вс system calls
				(OS dependent)
				!= за windows и linux
				
3	- инф за вс library calls
				(portable)
				== за вс ОС

имаме неразбираема ф-я 
=> system call 	-> man 2 <name>
=> library call -> man 3 <name>


в man 3 стр:
NAME
	имена_на_функции
SYNOPSIS
	#include <header file>
	....
	signatures_на_функциите
	....
...
	
-------------------------------------------------------
System/Library calls
(да се прочетат man страниците :) жизненоважно е)
ВИНАГИ обработка на случая, ако sys call-а fail-не

|~~~~~~|
|malloc| колко byte-а памет искаме от ОС да задели
|~~~~~~|

void *malloc(size_t size)

успех 	-> ptr към началото (линейно подредени)
неуспех -> null

ПРЕДИ края => винаги деалокиране (освобождаване на паметта)
иначе - memory leak 

|~~~~|
|free| освобождава алокираната памет
|~~~~|

void free(void *ptr)

|~~~~|
|exit| връща exit status
|~~~~|

#include <stdlib.h>
exit(<status>);
exit(5);

Винаги при промяна в сорс кода
=>прекомпилация

Ако не сме Include-нали библиотеката
=> като изп команда make
=> error "implicit declaration of function '...'"
=> ако го няма => man 3 ... => виждаме header-a :)

SC:

|~~~~|
|open| позволява да работим с файлове
|~~~~|

#include <sys/type.h>
#include <sys/stat.h>
#include <fcntl.h>

int open(const char*pathname, int flags)
успешно   ->num of file descriptor
неуспешно -> -1

file descriptor - стр-ра, която ОС използва, за да репрезентира файлове
(уникални за процес)

важни флагове:
O_RDONLY - read only
O_WRONLY - write only
O_RDWR	 - read & write

O_APPEND   - за писане -> добавяне към края 
O_TRUNCATE - ако файлът съществуа -> трие се
O_CREAT    - ако не съществува, се създава файлът
			(O_create и 3 аргумент за perms)
			
алокирали сме памет за ФД
=> да я деалокираме
	
|~~~~~|
|close| деалокиране на ФД
|~~~~~|

#include <unistd.h>

int close(int fd);
успех   -> 0
неуспех -> -1


|~~~~|
|read| четем от файл (от позиция на ФД)
|~~~~|

#include <unistd.h>
ssize_t read(int fd, void *buf, size_t count);

<fd>  	- (от) ФД = файл за четене
<buf> 	- (към) парче памет, в което записваме прочетеното
<vount> - (колко) колко байта четем

успех   -> връща колко е успял да прочете
неуспех -> -1

|~~~~~|
|write| пишем във файл
|~~~~~|

#include <unistd.h>
ssize_t write(int fd, const void *buf, size_t count);

<fd>  	- (към) ФД = файл за писане
<buf> 	- (от) парче памет, от което четем
<vount> - (колко) колко байта пишем

успех   -> връща колко е успял да запише
неуспех -> -1


---------
ФД имат позиция, която показва къде се намираме във файла
четем 5 байта
не сме правили нищо -> 0-4 байт
четем 10 байта
					-> 5-14байт
----------
няма курсор и за четене, и за писане 

четем     7 (0 -  6)
и после
записваме 7 (7 - 14)


----------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

int main() {
	int fd1 = open("test_file", O_RDWR | O_TRUNCATE | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
	//релативен път => спрямо дир, от която сме стартирали п-са
	//отвори  файла в read-write режим
	//ако същ. => изчисти го
	//ако не същ. => създай го с макросите
	//в man страницата има макроси за permissions
	
	//int open(const char *pathname, int flags, mode_t mode)
	//mode_t - поредица от битове 
	//mode = 8bit /1byte/
	
	
	// |
	// 0 | 0 = 0
	// 1 | 0 = 1
	// 0 | 1 = 1
	// 1 | 1 = 1
	
	// &
	// 0 & 0 = 0
	// 1 & 0 = 0
	// 0 & 1 = 0
	// 1 & 1 = 1
	
	//Примерно:
	//O_RDRW  = 00000001
	//O_TRUNC = 00000010
	//O_CREAT = 00000100
	
	//O_RDWR | O_TRUNC
	
	// 00000001
	// |
	// 00000010
	// =
	// 00000011
	
	int a=66381;
	write(fd1, &a, 4);
	// sizeof(int) = 4 за по-лесно си пишем 4ката
	
	//ssize_t write(int fd, const void *buf, size_t count)
	//&variable = address of variable
	//*address  = value of variable at address
	
	
	
	
	return 0;
}

...
xxd test_file
-> показва 4d03 0100
4d03 0100
4d 03 01 00 - байтове 

16-тична: 0123456789ABCDEF

==================
16тична -> 2ична |
==================
4d 03 01 00

=Бърз начин= (binary representation)
============
4
0100
d
1101
(13 = 8 + 4 + 1)

4d = 01001101
03 = 00000011
01 = 00000001
00 = 00000000

4d030100 = 01001101 00000011 00000001 00000000

=Бавен начин=  16->10->2
=============
(4d)

16^0 * d = 16^0 * 13
+
16^1 * 4
=
77 

77 = 64 + 8 + 4 + 1
2^6 + 2^3 + 2^2 + 2^0

7 6 5 4 3 2 1 0 
_ _ _ _ _ _ _ _
0 1 0 0 1 1 0 1
- - - - - - - - 
======
Little endianess

~BYTE 1
7 6 5 4 3 2 1 0
0 1 0 0 1 1 0 1

~BYTE 2
15 14 13 12 11 10 9 8
0  0  0  0  0  0  1 1

~BYTE 3
23 22 21 20 19 18 17 16 
0  0  0  0  0  0  0  1

~BYTE 4
32 31 30 29 38 27 26 25 24
0  0  0  0  0  0  0  0  0 

=> 2^0 + 2^2 + 2^3 + 2^6 + 2^8 + 2^9 + 2^16 = 66381
(което е и ст-та от файла main #a=66381)
-----------
xxd -b = дава в байнъри
-----------
един файл може да бъде асоцииран с повече ФД 

пълно име на ФД: A:4
				 B:4

A:
	fd1 = open(test_file)
	fd3 = open(test_file) 
	fd1 = 4
pos = 0
	read(f1,10); = 0-9
pos = 10
	write(fd1,15); = 10-24
pos = 25
	read(fd1,10); = 25-34
pos = 35

B:
	fd2 = open(test_file)
	fd2 = 4 //възможно е, но пак са !=
pos = 0 //не е повлиян от първия
	read(fd2,2); = 0-1
pos = 2

fd1 != fd2 	
	
-----------
Задача:
Копирайте съдържанието на foo.txt в bar.txt 

-------------------
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

//Всяка пограма идва с 3 отворени ФД
//0 = stdin
//1 = stdout
//2 = stderr
int main()
{
	//fd1, fd2  ползваме, за да запазим ст-та върната от open
	int fd1;
	int fd2;
	char c; //buffer

	//отваряме файла за четене
	if ( ( fd1 = open("foo.txt", O_RDONLY) ) == -1 ) {
		//33 байта = дължина на съобщението
		//2 = stderr
		write(2, "File failed to open in read mode\n", 33);
		exit(1);
	}

	//ако не съществува, създай го с перм...
	if ( ( fd2 = open("bar.txt", O_CREAT|O_WRONLY|O_TRUNCATE, S_IRUSR|S_IWUSR) ) == -1 ){
		write(2, "File failed to open in write mode\n", 34);
		close(fd1);
		exit(2);
	}

	//&c - връща адреса й
	//четем и записваме байт по байт:
	while ( read(fd1, &c, 1) ){ //връща 1ца, докато има какво да чете; накрая 0
		write(fd2, &c, 1);
	}

	close(fd1);
	close(fd2);
	exit(0);
}
-----------------
Сигнатура на main ф-я 

int main(int argc, char* argv[])

argc = cmd line arguments + 1
argc = count of elements in argv 

./main pesho gosho lili
argv[]
argv[0] = char * ===> ./mainNULL  - command name (пътя с който сме си викнали п-мата) 
argv[1] = char * ===> peshoNULL
argv[2] = char * ===> goshoNULL
argv[3] = char * ===> liliNULL

argc = 4
-------------------

=========================
Работа по задачите :))) |
=========================

1. Създаваме си директория
2. Копираме мейк файла от гитхъб: (Makefile)
		ifndef CC
			CC=gcc
		endif
		CFLAGS=-std=c99 -Werror -Wall -Wpedantic -Wextra
		SRCS=main.c
		OBJS=$(subst .c,.o,$(SRCS))
		RM=rm -f

		all: main

		foo: main.o
			$(CC) $(CFLAGS) -o main main.c

		clean:
			$(RM) $(OBJS) main
3. Създаваме файл main.c
4. Ако не знаем библитоека на команда (удобно да имаме 2 терминала)
	man 2 cmd
	man 3 cmd


Задача|
=======
Реализирайте командата cp, работеща с 2 аргумента, подадени като входни параметри

- Приема точно 2 cmd args
- file name to be copied
- file where to copy firt's content

1. Проверка на входните данни
	1.1
	
#include <stdio.h> //printf 
#include <stdlib.h> //exit
#include <sys/types.h> //open
#include <sys/stat.h>  //
#include <fcntl.h>     //
#include <unistd.h>    //read

int main (int argc, char* argv[])
{
	if ( argc-1 != 2) //count of cmd args
	{
		printf("Number of arguments must be 2.");
		exit(1);
	}

	int fd1;
	int fd2;
	char c;
	
	if((fd1 = open(argv[1], O_RDONLY)) == -1) //влизаме ако не успеем да отворим фд1
	{
		printf("Arg1 is not a valid file.");
		exit(2);
	}
	if((fd2 = open(argv[2], O_CREAT|O_WRONLY|O_TRUNCATE, S_IRUSR|S_IWUSR|S_IRGTP|S_IROTH)) == -1) //влизаме ако не успеем да отворим фд2
	{
		printf("Arg1 is not a valid file.");
		close(fd1);
		exit(2);
	}
	
	while(read(fd1, &c, 1))
	{
		if(fd1 == -1)
		write(fd2, &c, 1);
	}
	
}


Навигация в ман страници

1 ред 	 			 - 1   shift + g
157	  				 - 157 shift + g 
последен 			 - shift + g
намиране на стринг	 - /string
				NEXT - n 
				PREV - p



3:12:22



























	
	
	
	
	
	
	
