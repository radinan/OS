cat a b c - все й е тая кой е първи
cp source destination  - има значение кой е първи

find /bin -prem 777 -exec cp {} bin2 \;
find /bin -perm 777 -exec cp bin2 {} \;

(zad 8000)

------------------------------------------------------------------------------------------------------------------------------------------------------------

temrinal - целия прозорец, в който пишем
shell - програмата на отсрещния сървър, с която си комуникираме
(ползваме shell-а bash)

от терминала -> шела (чете 1 по 1, интерпретира и прави нещо)

неспец символи: asdfghjk1234  и тн.
спец символи : # * ? ! [] $ && || | и тн.

Глобове - специални символи със значение
(expand–ват се до имена на фйалове, които СЪЩЕСТВУВАТ)

ls -l - работи в/у текущата дир
ls -l file - работи в/у файла

* = всичко
ls -l * -работи в/у вс файлове в дир-а (ls -l a b c d ... аналогично е)
ls -l m* -работи в/у вс файлове в дир-а, започващи с m
ls -l 05/m* - работи в/у вс файлове в дир 05, започващи с m (ls -l 05/mravka 05/muha)

? = кой да е точно 1 символ
ls ? -> a, b, c, d
ls -l ? - дава a, b, c, d
ls -l ba? - сейм за bad, bar, baz

групиране:
ls -l b?r* -дава вс файлове, които започват с b; кой да е символ; после r; после каквото и да е

[] = дефиниране на клас
ls -l b[ae]z - дава bad, bez (точно 1 от символите)
ls -l b[qwertykljasdfh]z - дава bad, bez (само тези съществуват и отговарят)
ls -l b[a-z]z - аналог на b[abcdefghijklm...yz]z

ако няма файл, който да матчва => не се замества с нищо, а го оставя такъв, какъвто е:
(имаме файл b[A-Z]z)
ls -l b[A-Z]z - ще опита да матчне; няма да успее; ще остави глоба така => вади инф за b[A-Z]z
(имаме и файл bAz)
ls -l b[A-Z]z - вади инф само за bAz

{} - Brace expansions
ls -l b{a,e,d,r,t, muha, mravka, pesho}r - дава bar,bdr,ber,brr,btr (и получаваме грешки за посл 3)
(обработва се до bar ber bdr brr btr bmuhar bmravkar bpeshor независимо дали съществуват)
(при [] се разпъва само до файловете, които съществуват)
ls -l a{1..10} - seuqence (ls -l a{1,2,3,4,5,6,7,8,9,10} => ls -l a1 a2 a3 a4 a5 a6 a7 a8 a9 a10)

touch a{1,3,7}pesho - създава a1pesho a3pesho a7pesho

!brace expansionite се обработват преди да бъдат обработени глобовете!

ls -l a{1..5}*
#ls -l a1* a2* a3* a4* a5*
#ls -l a1 a1pesho a2* a3pesho a4 a5* (Понеже нямаме файлове започващи с а2 или а5)
=>грешки за а2* и а5*
=>вади а1 а1pesho a3pesho 


touch '*' -създава файл с име * (а не '*')
touch \* - същото
ls -l * - expand-ва се до всички файлове

\ =спец символ (escape)
ls -l \* -дава инф за файл *

'' =вс м/у тях се интерпретира буквално (без спец значение)
touch 'dw*?{1..10}*' -създава файл dw*?{1..10}*

"" =маха спец значение на спец символи (освен $ | `)
touch "{1..10}" - създава файл {1..10}


------------------------------------------------------------------------------------------------------------------------------------------------------------

Command substitution
$( ) - bash интерпретира текста м/у скобите като поредица от команди
(bash изпълнява командите и заменя цялата конструкция с output-а от тези команди)

echo "test" - приема аргументи и ги принти на stdout-а си

ls -l $(echo test) - баш вижда shell subst => изпълнява командата вътре (дава test на stdout)=> замества цялото със stdout-а =>
ls -l test (преобразува се до това)

ls -l $( find /bin -type f | wc -l ) - $(..) дава 105, но нямаме права за четене => грешка за 105 :
ls -l 105 (преобразува се до това)

ls -l $( find $( echo dir1 ) -type f ) - вижда shell subst => вижда 2ри => замества:
ls -l $( find dir1 -type f ) после:
ls -l dir1/a dir1/b =>дава инф за а и b

ls -l 'echo dir1/a dir1/b' - се превръша до ^
$( ) `cmds`
амаааааа е старичко (не го ползвай)



(имаме dir1 с файлове a, b, kofti ime na file; dir2 - празна)
cp $( find dir1 -type f ) dir2
замества се с:
cp a b kofti ime na file dir2 => имена на 6 файла, а не на 3 файла

find dir1 дава  dir1/a
		dir1/kofti ime na file
		dir1/b


------------------------------------------------------------------------------------------------------------------------------------------------------------

ls -l a
ls -l b
ls -l a; wc -l b -изпълнява 2 команди една след друга 

ако пишем мн дълги команди ...\(натискаме enter)
>(продължаваме на нов ред)

-----------------------------------------------------------------------------------------------------------------------------------------------------------

Regular expressions - регулярни изрази

вс инструмент, който разбира от регулярни изрази, сам решава как да ги интерпретира

* ? . +
() {} []

cmd1 "a+" - търси а+
cmd2 "a+" - търси думи с а и поне 1 символ

(!важно е да знаем командата как интерпретира!)
(!!!!!!!!!!!!man 7 regex!!!!!!!!!!!!!!!!!!!!!!)

(file regex:	a
		b
		c
		d
		muha
		mravka
		bar
		baz
		bed
		bad)

cat regex | grep . - (. = кой да е символ)
cat regex | grep --color . - оцветява вс, което е матчнал греп-а (aka вс)
cat regex | grep --color b. - оцветява ba (bar) ba (baz) be (bed) ba (bad)

grep се опитва да матчне макс мн неща
т.е ако имаме barbdrbrbc => ^^ ще оцвети ba bd brbc 


\t = tab
\n = newline
\r = carriage return


(file tab: a	c
	   1	2
	   pesho\tgosho)
cat tab | grep '\t' - дава pesho\tgosho
cat tab | grep '\\t' --color - оцветява \t (ескейпваме \)

---------------------------------------------------------
RE anchors

^ - начало на ред
$ - край на ред
\< - начало на дума
\> - край на дума


(file regex: pesho gosho
	     gosho pesho
	     gosho)
cat regex | grep pesho --color - оцветява pesho и на 2та реда
cat regex | grep "^pesho" --color - (^=начало на ред) -> дава и оцветява само 1я
cat regex | grep "pesho$" --color - ($=край на ред) -> дава и оцветява само 2я
cat regex | grep "^gosho$" --color - дава и оцветява само 3я ред

(имаме и tova e pesho veliki
	 tovaepeshoneveliki )
cat regex | grep "\<pesho" --color - не матчва tovaepeshoneveliki, защото думата не започва с pesho
				     (но матчва pesho gosho; gosho pesho; tova e pesho veliki)

cat regex | grep "pesho" --color - вече си матчва вс срещания
cat regex | grep "sho\>" --color - срещания и на gosho, и на pesho

---------------------------------------------------------

използване на класове

cat regex | grep "b[ae]d" --color - матчва и bad, и bed

[: :] - predefined

букв+цифр     букви                  цифри
[:alnum:]    [:alpha:]   [:cntrl:]  [:digit:]
[:lower:]    [:punct :]  [:space:]  [:upper:]
малки букв  пункт знаци  whitespace  гл букв


echo 1234567asdfghj2345 | grep "[[:digit:]]" --color - ([] за клас + името на класа)
(оцветява цифрите)
echo 1234567asdfghj2345 | grep "[[:digit:]а]" --color - (може да дописваме)
(оцветява цифрите и а-тата)
echo 1234567asdfghj2345 | grep "[[:digit:][:alpha:]]" --color - (може и няколко класа)

^ - ако е на 1 място в класа => негация (отрицание)
(ако не е на 1 място=>норм символ)
echo 1234567asdfghj2345 | grep "[^[:digit:]]" --color - оцветява вс което не е цифра

echo ABCDeeee | grep '[A-Z]' --color -оцветява ABCD


grep
egrep = grep -E
pgrep = grep -P

-E -P -F - карат grep  да интерпретира регекса като рзл нещо
-F - като поредица от символи (нищо няма спец значение)
-P - като пърл regex-и
-E - extended regex-и

(!!!!!!!!man regex!!!!!!!!!!!!!)


grep [[:upper:]] /etc/passwd - матчва главните букви
egrep '^[rb]' /etc/passwd - матчва вс редове, които започват с r или b
egrep '^[^rb]' /etc/passwd - матчва вс редове, които не започват с r или b
grep -e "^r" -e "^b" /etc/passwd - търси по Multipattern-и

---------------------------------------------------------

RE quantifiers - задават бр повторения на символа преди тях

+  - 1 или повече повторения
?  - 0 или 1
*  - 0 или повече
{} - вътре определена бройка

(file a: a 
	 aa
	 aaa
	 aaaa
	 aaaaa
	 aaaaaa
	 aaaaaaа)
cat a | grep 'a\{2,4\}' --color - матчва от 2 до 4 а-та
aa	<- 2ха
aaa	<- 3ха
aaaa	<- 4ха
aaaa(a)	<- 4ха
aaaaaa	<- 2ха + 2ха + 2ха
aaaaaaа <- 2ха + 2ха + 3ха


egrep '^[stu].{14}$' /usr/share/dict/words 
^[stu] - начало на ред s/t/u
.{14}$ - има точно 14 символа до края

egrep '^[aeiou].{9}ion$' /usr/share/dict/words
^[aeiou] - начало на ред a/e/i/o/u
.{9} - има 9 какви да е символа
ion$ - ion накрая

egrep '^c.{15,}$' /usr/share/dict/words
^c - начало на ред c
.{15,}$ - поне 15 какви да е символа

egrep '^n.{6,10}c$' /usr/share/dict/words
^n - начало на ред c
.{6,10} - м/у 6 и 10 символа
c$ - завършва с c

---------------------------------------------------------
RE parenthesis - дефинираме capture групи

capture групи

(file file: Parenthesis allow you to store matchedpatterns.)

cat file | grep . - match-ваме кой да е символ (aka вс)
cat file | grep --color .. - match-ваме кои да са 2 символа (aka вс)
cat file | grep --color "\(.\)\l"
(пц е: (.)\l, но ескейпваме скобите)
(\l реферираме)
        или
cat file | grep -E --color "(.)\l" - намери ми кой да е символ и същия този символ
cat file | grep -E --color "(aren)(t)" - матчва arent
cat file | grep -E --color "(aren)(t).*\2" - матчва вс без P и erns (nz shto)
cat file | grep -E --color "(a|l)" - матчва вс a или l
cat file | grep -E --color "(are|low)"
cat file | grep -E --color "(all|low)" - оцветява само all (в allow) (изяжда прочетеното)

-----------------------------------------------------------------------------------------------------------------------------------------------------------

текстови редактори

vi (visual editor)
vim (vi improved) - това ще ползваме

vim filename 

няколко мода:
normal - като стартираме; :q + Enter => изход; 
			   i => insertion mode; 
			   :w => запазваме промените
insertion - писане; esc => normal mode
		    backspace => трием
(:q! ако иначе не можем да излезем)


!!!!!!!!!!!!!!!!!!!!!!! vimtutor !!!!!!!!!!!!!!!!!!!!!!!!!!!

